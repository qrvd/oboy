// ==============================================
// This file is automatically generated. Don't look at it.
// ==============================================

#define op(name) void name(struct CPU *cpu, byte d8, ibyte r8, word d16)
#define reg(name) (cpu->name)
#define zero(bit) reg(F.Z) = (bit)
#define subtract(bit) reg(F.S) = (bit)
#define halfcarry(bit) reg(F.H) = (bit)
#define carry(bit) reg(F.C) = (bit)
#define ld(left, right, lexp, rexp) op(LD_##left##_##right) { (lexp) = (rexp); }
// ==============================================
// Miscellaneous
// ==============================================

op(NOP) {
	// :)
}

op(EI) {
	reg(interrupts) = true;
}

op(DI) {
	reg(interrupts) = false;
}

op(HALT) {
	reg(halted) = true;
}

op(STOP_0) {
	reg(halted) = true;
}

op(RETI) {
	reg(interrupts) = true; reg(PC) = gbPop16(cpu) - 1;
}

op(PREFIX_CB) {
	puts("0xCB was called directly!");
	exit(1);
}

op(CCF) {
	reg(F.C) = !reg(F.C);
	halfcarry(false);
	subtract(false);
}

op(CPL) {
	reg(A) = ~reg(A);
	halfcarry(true);
	subtract(true);
}

op(SCF) {
	carry(true);
	subtract(false);
	halfcarry(false);
}

// ==============================================
// 16-bit immediate load
// ==============================================

ld(BC, d16, reg(BC), d16); // LD_BC_d16
ld(DE, d16, reg(DE), d16); // LD_DE_d16
ld(HL, d16, reg(HL), d16); // LD_HL_d16
ld(SP, d16, reg(SP), d16); // LD_SP_d16
op(LD_ma16_A) {
	writeByte(d16, reg(A));
}

// ==============================================
// 16-bit increment
// ==============================================

op(INC_BC) {
	reg(BC)++;
}

op(INC_DE) {
	reg(DE)++;
}

op(INC_HL) {
	reg(HL)++;
}

op(INC_SP) {
	reg(SP)++;
}

op(DEC_BC) {
	reg(BC)--;
}

op(DEC_DE) {
	reg(DE)--;
}

op(DEC_HL) {
	reg(HL)--;
}

op(DEC_SP) {
	reg(SP)--;
}

// ==============================================
// 8-bit increment
// ==============================================

op(INC_B) {
	subtract(false);
	halfcarry((((reg(B) & 0xF) + 1) & 0x10) != 0);
	reg(B)++;
	zero(reg(B) == 0);
}

op(DEC_B) {
	subtract(true);
	halfcarry((((reg(B) & 0xF) - 1) & 0x10) != 0);
	reg(B)--;
	zero(reg(B) == 0);
}

op(INC_C) {
	subtract(false);
	halfcarry((((reg(C) & 0xF) + 1) & 0x10) != 0);
	reg(C)++;
	zero(reg(C) == 0);
}

op(DEC_C) {
	subtract(true);
	halfcarry((((reg(C) & 0xF) - 1) & 0x10) != 0);
	reg(C)--;
	zero(reg(C) == 0);
}

op(INC_D) {
	subtract(false);
	halfcarry((((reg(D) & 0xF) + 1) & 0x10) != 0);
	reg(D)++;
	zero(reg(D) == 0);
}

op(DEC_D) {
	subtract(true);
	halfcarry((((reg(D) & 0xF) - 1) & 0x10) != 0);
	reg(D)--;
	zero(reg(D) == 0);
}

op(INC_E) {
	subtract(false);
	halfcarry((((reg(E) & 0xF) + 1) & 0x10) != 0);
	reg(E)++;
	zero(reg(E) == 0);
}

op(DEC_E) {
	subtract(true);
	halfcarry((((reg(E) & 0xF) - 1) & 0x10) != 0);
	reg(E)--;
	zero(reg(E) == 0);
}

op(INC_H) {
	subtract(false);
	halfcarry((((reg(H) & 0xF) + 1) & 0x10) != 0);
	reg(H)++;
	zero(reg(H) == 0);
}

op(DEC_H) {
	subtract(true);
	halfcarry((((reg(H) & 0xF) - 1) & 0x10) != 0);
	reg(H)--;
	zero(reg(H) == 0);
}

op(INC_L) {
	subtract(false);
	halfcarry((((reg(L) & 0xF) + 1) & 0x10) != 0);
	reg(L)++;
	zero(reg(L) == 0);
}

op(DEC_L) {
	subtract(true);
	halfcarry((((reg(L) & 0xF) - 1) & 0x10) != 0);
	reg(L)--;
	zero(reg(L) == 0);
}

op(INC_A) {
	subtract(false);
	halfcarry((((reg(A) & 0xF) + 1) & 0x10) != 0);
	reg(A)++;
	zero(reg(A) == 0);
}

op(DEC_A) {
	subtract(true);
	halfcarry((((reg(A) & 0xF) - 1) & 0x10) != 0);
	reg(A)--;
	zero(reg(A) == 0);
}

op(INC_mHL) {
	subtract(false);
	halfcarry((readByte(((reg(HL)) & 0xF) + 1) & 0x10) != 0);
	writeByte(reg(HL), readByte(reg(HL)) + 1);
	zero(readByte(reg(HL)) == 0);
}

op(DEC_mHL) {
	subtract(true);
	halfcarry((readByte(((reg(HL)) & 0xF) - 1) & 0x10) != 0);
	writeByte(reg(HL), readByte(reg(HL)) - 1);
	zero(readByte(reg(HL)) == 0);
}

// ==============================================
// 16-bit push/pop
// ==============================================

op(PUSH_BC) {
	gbPush16(cpu, reg(BC));
}

op(PUSH_DE) {
	gbPush16(cpu, reg(DE));
}

op(PUSH_HL) {
	gbPush16(cpu, reg(HL));
}

op(PUSH_AF) {
	gbPush16(cpu, reg(AF));
}

op(POP_BC) {
	reg(BC) = gbPop16(cpu);
}

op(POP_DE) {
	reg(DE) = gbPop16(cpu);
}

op(POP_HL) {
	reg(HL) = gbPop16(cpu);
}

op(POP_AF) {
	reg(AF) = gbPop16(cpu);
}

// ==============================================
// ADD
// ==============================================

op(ADD_A_B) {
	carry((word)reg(A) + reg(B) > 0xFF);
	halfcarry((reg(A) & 0xF) + reg(B) > 0xF);
	subtract(false);
	reg(A) += reg(B);
	zero(reg(A) == 0);
}

op(ADC_A_B) {
	carry((word)reg(A) + (reg(B) + (reg(F.C) ? 1 : 0)) > 0xFF);
	halfcarry((reg(A) & 0xF) + (reg(B) + (reg(F.C) ? 1 : 0)) > 0xF);
	subtract(false);
	reg(A) += (reg(B) + (reg(F.C) ? 1 : 0));
	zero(reg(A) == 0);
}

op(ADD_A_C) {
	carry((word)reg(A) + reg(C) > 0xFF);
	halfcarry((reg(A) & 0xF) + reg(C) > 0xF);
	subtract(false);
	reg(A) += reg(C);
	zero(reg(A) == 0);
}

op(ADC_A_C) {
	carry((word)reg(A) + (reg(C) + (reg(F.C) ? 1 : 0)) > 0xFF);
	halfcarry((reg(A) & 0xF) + (reg(C) + (reg(F.C) ? 1 : 0)) > 0xF);
	subtract(false);
	reg(A) += (reg(C) + (reg(F.C) ? 1 : 0));
	zero(reg(A) == 0);
}

op(ADD_A_D) {
	carry((word)reg(A) + reg(D) > 0xFF);
	halfcarry((reg(A) & 0xF) + reg(D) > 0xF);
	subtract(false);
	reg(A) += reg(D);
	zero(reg(A) == 0);
}

op(ADC_A_D) {
	carry((word)reg(A) + (reg(D) + (reg(F.C) ? 1 : 0)) > 0xFF);
	halfcarry((reg(A) & 0xF) + (reg(D) + (reg(F.C) ? 1 : 0)) > 0xF);
	subtract(false);
	reg(A) += (reg(D) + (reg(F.C) ? 1 : 0));
	zero(reg(A) == 0);
}

op(ADD_A_E) {
	carry((word)reg(A) + reg(E) > 0xFF);
	halfcarry((reg(A) & 0xF) + reg(E) > 0xF);
	subtract(false);
	reg(A) += reg(E);
	zero(reg(A) == 0);
}

op(ADC_A_E) {
	carry((word)reg(A) + (reg(E) + (reg(F.C) ? 1 : 0)) > 0xFF);
	halfcarry((reg(A) & 0xF) + (reg(E) + (reg(F.C) ? 1 : 0)) > 0xF);
	subtract(false);
	reg(A) += (reg(E) + (reg(F.C) ? 1 : 0));
	zero(reg(A) == 0);
}

op(ADD_A_H) {
	carry((word)reg(A) + reg(H) > 0xFF);
	halfcarry((reg(A) & 0xF) + reg(H) > 0xF);
	subtract(false);
	reg(A) += reg(H);
	zero(reg(A) == 0);
}

op(ADC_A_H) {
	carry((word)reg(A) + (reg(H) + (reg(F.C) ? 1 : 0)) > 0xFF);
	halfcarry((reg(A) & 0xF) + (reg(H) + (reg(F.C) ? 1 : 0)) > 0xF);
	subtract(false);
	reg(A) += (reg(H) + (reg(F.C) ? 1 : 0));
	zero(reg(A) == 0);
}

op(ADD_A_L) {
	carry((word)reg(A) + reg(L) > 0xFF);
	halfcarry((reg(A) & 0xF) + reg(L) > 0xF);
	subtract(false);
	reg(A) += reg(L);
	zero(reg(A) == 0);
}

op(ADC_A_L) {
	carry((word)reg(A) + (reg(L) + (reg(F.C) ? 1 : 0)) > 0xFF);
	halfcarry((reg(A) & 0xF) + (reg(L) + (reg(F.C) ? 1 : 0)) > 0xF);
	subtract(false);
	reg(A) += (reg(L) + (reg(F.C) ? 1 : 0));
	zero(reg(A) == 0);
}

op(ADD_A_A) {
	carry((word)reg(A) + reg(A) > 0xFF);
	halfcarry((reg(A) & 0xF) + reg(A) > 0xF);
	subtract(false);
	reg(A) += reg(A);
	zero(reg(A) == 0);
}

op(ADC_A_A) {
	carry((word)reg(A) + (reg(A) + (reg(F.C) ? 1 : 0)) > 0xFF);
	halfcarry((reg(A) & 0xF) + (reg(A) + (reg(F.C) ? 1 : 0)) > 0xF);
	subtract(false);
	reg(A) += (reg(A) + (reg(F.C) ? 1 : 0));
	zero(reg(A) == 0);
}

op(ADD_A_d8) {
	carry((word)reg(A) + d8 > 0xFF);
	halfcarry((reg(A) & 0xF) + d8 > 0xF);
	subtract(false);
	reg(A) += d8;
	zero(reg(A) == 0);
}

op(ADC_A_d8) {
	carry((word)reg(A) + (d8 + (reg(F.C) ? 1 : 0)) > 0xFF);
	halfcarry((reg(A) & 0xF) + (d8 + (reg(F.C) ? 1 : 0)) > 0xF);
	subtract(false);
	reg(A) += (d8 + (reg(F.C) ? 1 : 0));
	zero(reg(A) == 0);
}

op(ADD_A_mHL) {
	carry((word)reg(A) + readByte(reg(HL)) > 0xFF);
	halfcarry((reg(A) & 0xF) + readByte(reg(HL)) > 0xF);
	subtract(false);
	reg(A) += readByte(reg(HL));
	zero(reg(A) == 0);
}

op(ADC_A_mHL) {
	carry((word)reg(A) + (readByte(reg(HL)) + (reg(F.C) ? 1 : 0)) > 0xFF);
	halfcarry((reg(A) & 0xF) + (readByte(reg(HL)) + (reg(F.C) ? 1 : 0)) > 0xF);
	subtract(false);
	reg(A) += (readByte(reg(HL)) + (reg(F.C) ? 1 : 0));
	zero(reg(A) == 0);
}

op(ADD_SP_r8) {
	carry((word)reg(SP) + (r8) > 0xFF);
	halfcarry((reg(SP) & 0xF) + (r8) > 0xF);
	subtract(false);
	reg(SP) += (r8);
	zero(reg(SP) == 0);
}

// ==============================================
// SUB
// ==============================================

op(SUB_B) {
	carry(reg(A) < reg(B));
	halfcarry((reg(A) & 0xF) < (reg(B) & 0xF));
	subtract(true);
	reg(A) -= reg(B);
	zero(reg(A) == 0);
}

op(SUB_C) {
	carry(reg(A) < reg(C));
	halfcarry((reg(A) & 0xF) < (reg(C) & 0xF));
	subtract(true);
	reg(A) -= reg(C);
	zero(reg(A) == 0);
}

op(SUB_D) {
	carry(reg(A) < reg(D));
	halfcarry((reg(A) & 0xF) < (reg(D) & 0xF));
	subtract(true);
	reg(A) -= reg(D);
	zero(reg(A) == 0);
}

op(SUB_E) {
	carry(reg(A) < reg(E));
	halfcarry((reg(A) & 0xF) < (reg(E) & 0xF));
	subtract(true);
	reg(A) -= reg(E);
	zero(reg(A) == 0);
}

op(SUB_H) {
	carry(reg(A) < reg(H));
	halfcarry((reg(A) & 0xF) < (reg(H) & 0xF));
	subtract(true);
	reg(A) -= reg(H);
	zero(reg(A) == 0);
}

op(SUB_L) {
	carry(reg(A) < reg(L));
	halfcarry((reg(A) & 0xF) < (reg(L) & 0xF));
	subtract(true);
	reg(A) -= reg(L);
	zero(reg(A) == 0);
}

op(SUB_A) {
	carry(reg(A) < reg(A));
	halfcarry((reg(A) & 0xF) < (reg(A) & 0xF));
	subtract(true);
	reg(A) -= reg(A);
	zero(reg(A) == 0);
}

op(SUB_d8) {
	carry(reg(A) < d8);
	halfcarry((reg(A) & 0xF) < (d8 & 0xF));
	subtract(true);
	reg(A) -= d8;
	zero(reg(A) == 0);
}

op(SUB_mHL) {
	byte br = readByte(reg(HL));
	carry(reg(A) < br);
	halfcarry((reg(A) & 0xF) < (br & 0xF));
	subtract(true);
	reg(A) -= br;
	zero(reg(A) == 0);
}

// ==============================================
// XOR and OR
// ==============================================

op(XOR_B) {
	reg(A) ^= reg(B);
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(false);
	carry(false);
}

op(XOR_C) {
	reg(A) ^= reg(C);
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(false);
	carry(false);
}

op(XOR_D) {
	reg(A) ^= reg(D);
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(false);
	carry(false);
}

op(XOR_E) {
	reg(A) ^= reg(E);
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(false);
	carry(false);
}

op(XOR_H) {
	reg(A) ^= reg(H);
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(false);
	carry(false);
}

op(XOR_L) {
	reg(A) ^= reg(L);
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(false);
	carry(false);
}

op(XOR_A) {
	reg(A) ^= reg(A);
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(false);
	carry(false);
}

op(OR_B) {
	reg(A) |= reg(B);
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(false);
	carry(false);
}

op(OR_C) {
	reg(A) |= reg(C);
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(false);
	carry(false);
}

op(OR_D) {
	reg(A) |= reg(D);
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(false);
	carry(false);
}

op(OR_E) {
	reg(A) |= reg(E);
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(false);
	carry(false);
}

op(OR_H) {
	reg(A) |= reg(H);
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(false);
	carry(false);
}

op(OR_L) {
	reg(A) |= reg(L);
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(false);
	carry(false);
}

op(OR_A) {
	reg(A) |= reg(A);
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(false);
	carry(false);
}

op(XOR_d8) {
	reg(A) ^= d8;
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(false);
	carry(false);
}

op(OR_d8) {
	reg(A) |= d8;
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(false);
	carry(false);
}

op(XOR_mHL) {
	reg(A) ^= readByte(reg(HL));
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(false);
	carry(false);
}

op(OR_mHL) {
	reg(A) |= readByte(reg(HL));
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(false);
	carry(false);
}

// ==============================================
// AND
// ==============================================

op(AND_B) {
	reg(A) &= reg(B);
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(true);
	carry(false);
}

op(AND_C) {
	reg(A) &= reg(C);
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(true);
	carry(false);
}

op(AND_D) {
	reg(A) &= reg(D);
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(true);
	carry(false);
}

op(AND_E) {
	reg(A) &= reg(E);
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(true);
	carry(false);
}

op(AND_H) {
	reg(A) &= reg(H);
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(true);
	carry(false);
}

op(AND_L) {
	reg(A) &= reg(L);
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(true);
	carry(false);
}

op(AND_A) {
	reg(A) &= reg(A);
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(true);
	carry(false);
}

op(AND_d8) {
	reg(A) &= d8;
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(true);
	carry(false);
}

op(AND_mHL) {
	reg(A) &= readByte(reg(HL));
	zero(reg(A) == 0);
	subtract(false);
	halfcarry(true);
	carry(false);
}

// ==============================================
// store A, indirect
// ==============================================

op(LD_mBC_A) {
	writeByte(reg(BC), reg(A));
}

op(LD_mDE_A) {
	writeByte(reg(DE), reg(A));
}

op(LD_mHLD_A) {
	writeByte(reg(HL)--, reg(A));
}

op(LD_mHLI_A) {
	writeByte(reg(HL)++, reg(A));
}

// ==============================================
// 8-bit load
// ==============================================

op(LD_B_B) {
	reg(B) = reg(B);
}

op(LD_B_C) {
	reg(B) = reg(C);
}

op(LD_B_D) {
	reg(B) = reg(D);
}

op(LD_B_E) {
	reg(B) = reg(E);
}

op(LD_B_H) {
	reg(B) = reg(H);
}

op(LD_B_L) {
	reg(B) = reg(L);
}

op(LD_B_mHL) {
	reg(B) = readByte(reg(HL));
}

op(LD_B_A) {
	reg(B) = reg(A);
}

op(LD_C_B) {
	reg(C) = reg(B);
}

op(LD_C_C) {
	reg(C) = reg(C);
}

op(LD_C_D) {
	reg(C) = reg(D);
}

op(LD_C_E) {
	reg(C) = reg(E);
}

op(LD_C_H) {
	reg(C) = reg(H);
}

op(LD_C_L) {
	reg(C) = reg(L);
}

op(LD_C_mHL) {
	reg(C) = readByte(reg(HL));
}

op(LD_C_A) {
	reg(C) = reg(A);
}

op(LD_D_B) {
	reg(D) = reg(B);
}

op(LD_D_C) {
	reg(D) = reg(C);
}

op(LD_D_D) {
	reg(D) = reg(D);
}

op(LD_D_E) {
	reg(D) = reg(E);
}

op(LD_D_H) {
	reg(D) = reg(H);
}

op(LD_D_L) {
	reg(D) = reg(L);
}

op(LD_D_mHL) {
	reg(D) = readByte(reg(HL));
}

op(LD_D_A) {
	reg(D) = reg(A);
}

op(LD_E_B) {
	reg(E) = reg(B);
}

op(LD_E_C) {
	reg(E) = reg(C);
}

op(LD_E_D) {
	reg(E) = reg(D);
}

op(LD_E_E) {
	reg(E) = reg(E);
}

op(LD_E_H) {
	reg(E) = reg(H);
}

op(LD_E_L) {
	reg(E) = reg(L);
}

op(LD_E_mHL) {
	reg(E) = readByte(reg(HL));
}

op(LD_E_A) {
	reg(E) = reg(A);
}

op(LD_H_B) {
	reg(H) = reg(B);
}

op(LD_H_C) {
	reg(H) = reg(C);
}

op(LD_H_D) {
	reg(H) = reg(D);
}

op(LD_H_E) {
	reg(H) = reg(E);
}

op(LD_H_H) {
	reg(H) = reg(H);
}

op(LD_H_L) {
	reg(H) = reg(L);
}

op(LD_H_mHL) {
	reg(H) = readByte(reg(HL));
}

op(LD_H_A) {
	reg(H) = reg(A);
}

op(LD_L_B) {
	reg(L) = reg(B);
}

op(LD_L_C) {
	reg(L) = reg(C);
}

op(LD_L_D) {
	reg(L) = reg(D);
}

op(LD_L_E) {
	reg(L) = reg(E);
}

op(LD_L_H) {
	reg(L) = reg(H);
}

op(LD_L_L) {
	reg(L) = reg(L);
}

op(LD_L_mHL) {
	reg(L) = readByte(reg(HL));
}

op(LD_L_A) {
	reg(L) = reg(A);
}

op(LD_mHL_B) {
	writeByte(reg(HL), reg(B));
}

op(LD_mHL_C) {
	writeByte(reg(HL), reg(C));
}

op(LD_mHL_D) {
	writeByte(reg(HL), reg(D));
}

op(LD_mHL_E) {
	writeByte(reg(HL), reg(E));
}

op(LD_mHL_H) {
	writeByte(reg(HL), reg(H));
}

op(LD_mHL_L) {
	writeByte(reg(HL), reg(L));
}

op(LD_mHL_A) {
	writeByte(reg(HL), reg(A));
}

op(LD_A_B) {
	reg(A) = reg(B);
}

op(LD_A_C) {
	reg(A) = reg(C);
}

op(LD_A_D) {
	reg(A) = reg(D);
}

op(LD_A_E) {
	reg(A) = reg(E);
}

op(LD_A_H) {
	reg(A) = reg(H);
}

op(LD_A_L) {
	reg(A) = reg(L);
}

op(LD_A_mHL) {
	reg(A) = readByte(reg(HL));
}

op(LD_A_A) {
	reg(A) = reg(A);
}

op(LD_mC_A) {
	writeByte(0xFF00 + reg(C), reg(A));
}

op(LDH_ma8_A) {
	writeByte(0xFF00 + d8, reg(A));
}

op(LDH_A_ma8) {
	reg(A) = readByte(0xFF00 + d8);
}

op(LD_A_mDE) {
	reg(A) = readByte(reg(DE));
}

// ==============================================
// RL
// ==============================================

op(RL_B) {
	halfcarry(false); subtract(false);
	byte newCarry = reg(B) >> 7;
	reg(B) <<= 1;
	zero((reg(B)) == 0);
	carry(newCarry == 1);
}

op(RL_C) {
	halfcarry(false); subtract(false);
	byte newCarry = reg(C) >> 7;
	reg(C) <<= 1;
	zero((reg(C)) == 0);
	carry(newCarry == 1);
}

op(RL_D) {
	halfcarry(false); subtract(false);
	byte newCarry = reg(D) >> 7;
	reg(D) <<= 1;
	zero((reg(D)) == 0);
	carry(newCarry == 1);
}

op(RL_E) {
	halfcarry(false); subtract(false);
	byte newCarry = reg(E) >> 7;
	reg(E) <<= 1;
	zero((reg(E)) == 0);
	carry(newCarry == 1);
}

op(RL_H) {
	halfcarry(false); subtract(false);
	byte newCarry = reg(H) >> 7;
	reg(H) <<= 1;
	zero((reg(H)) == 0);
	carry(newCarry == 1);
}

op(RL_L) {
	halfcarry(false); subtract(false);
	byte newCarry = reg(L) >> 7;
	reg(L) <<= 1;
	zero((reg(L)) == 0);
	carry(newCarry == 1);
}

op(RL_A) {
	halfcarry(false); subtract(false);
	byte newCarry = reg(A) >> 7;
	reg(A) <<= 1;
	zero((reg(A)) == 0);
	carry(newCarry == 1);
}

op(RLA) {
	halfcarry(false); subtract(false); zero(false);
	byte newCarry = reg(A) >> 7;
	reg(A) <<= 1;
	carry(newCarry == 1);
}

op(RL_mHL) {
	byte br = readByte(reg(HL));
	halfcarry(false); subtract(false);
	byte newCarry = br >> 7;
	br <<= 1;
	zero(br == 0);
	carry(newCarry == 1);
	writeByte(reg(HL), br);
}

// ==============================================
// 8-bit load immediate
// ==============================================

op(LD_B_d8) {
	reg(B) = d8;
}

op(LD_C_d8) {
	reg(C) = d8;
}

op(LD_D_d8) {
	reg(D) = d8;
}

op(LD_E_d8) {
	reg(E) = d8;
}

op(LD_H_d8) {
	reg(H) = d8;
}

op(LD_L_d8) {
	reg(L) = d8;
}

op(LD_A_d8) {
	reg(A) = d8;
}

op(LD_mHL_d8) {
	writeByte(reg(HL), d8);
}

// ==============================================
// call
// ==============================================

op(CALL_a16) {
	gbPush16(cpu, reg(PC) + 3);
	reg(PC) = d16 - 3;
}

op(CALL_Z_a16) {
	if (reg(F.Z)) {
		reg(clock) += 12;
		gbPush16(cpu, reg(PC) + 3);
		reg(PC) = d16 - 3;
	}
}

op(CALL_NZ_a16) {
	if (!reg(F.Z)) {
		reg(clock) += 12;
		gbPush16(cpu, reg(PC) + 3);
		reg(PC) = d16 - 3;
	}
}

op(CALL_C_a16) {
	if (reg(F.C)) {
		reg(clock) += 12;
		gbPush16(cpu, reg(PC) + 3);
		reg(PC) = d16 - 3;
	}
}

op(CALL_NC_a16) {
	if (!reg(F.C)) {
		reg(clock) += 12;
		gbPush16(cpu, reg(PC) + 3);
		reg(PC) = d16 - 3;
	}
}

// ==============================================
// swap
// ==============================================

op(SWAP_mHL) {
	writeByte(reg(HL), ~readByte(reg(HL)));
}

op(SWAP_B) {
	reg(B) = ~reg(B);
}

op(SWAP_C) {
	reg(C) = ~reg(C);
}

op(SWAP_D) {
	reg(D) = ~reg(D);
}

op(SWAP_E) {
	reg(E) = ~reg(E);
}

op(SWAP_H) {
	reg(H) = ~reg(H);
}

op(SWAP_L) {
	reg(L) = ~reg(L);
}

op(SWAP_A) {
	reg(A) = ~reg(A);
}

// ==============================================
// jump
// ==============================================

op(JP_a16) {
	reg(PC) = d16 - 3;
}

op(JP_mHL) {
	reg(PC) = readByte(reg(HL)) - 1;
}

op(JP_Z_a16) {
	if (reg(F.Z)) {
		reg(clock) += 4;
		reg(PC) = d16 - 3;
	}
}

op(JP_NZ_a16) {
	if (!reg(F.Z)) {
		reg(clock) += 4;
		reg(PC) = d16 - 3;
	}
}

op(JP_C_a16) {
	if (reg(F.C)) {
		reg(clock) += 4;
		reg(PC) = d16 - 3;
	}
}

op(JP_NC_a16) {
	if (!reg(F.C)) {
		reg(clock) += 4;
		reg(PC) = d16 - 3;
	}
}

// ==============================================
// jump relative
// ==============================================

op(JR_r8) {
	reg(PC) += r8;
}

op(JR_Z_r8) {
	if (reg(F.Z)) {
		reg(clock) += 4;
		reg(PC) += r8;
	}
}

op(JR_NZ_r8) {
	if (!reg(F.Z)) {
		reg(clock) += 4;
		reg(PC) += r8;
	}
}

op(JR_C_r8) {
	if (reg(F.C)) {
		reg(clock) += 4;
		reg(PC) += r8;
	}
}

op(JR_NC_r8) {
	if (!reg(F.C)) {
		reg(clock) += 4;
		reg(PC) += r8;
	}
}

// ==============================================
// return
// ==============================================

op(RET) {
	reg(PC) = gbPop16(cpu) - 1;
}

op(RET_Z) {
	if (reg(F.Z)) {
		reg(clock) += 12;
		reg(PC) = gbPop16(cpu) - 1;
	}
}

op(RET_NZ) {
	if (!reg(F.Z)) {
		reg(clock) += 12;
		reg(PC) = gbPop16(cpu) - 1;
	}
}

op(RET_C) {
	if (reg(F.C)) {
		reg(clock) += 12;
		reg(PC) = gbPop16(cpu) - 1;
	}
}

op(RET_NC) {
	if (!reg(F.C)) {
		reg(clock) += 12;
		reg(PC) = gbPop16(cpu) - 1;
	}
}

// ==============================================
// CP
// ==============================================

op(CP_B) {
	zero(reg(A) == reg(B));
	subtract(true);
	carry(reg(A) < reg(B));
	halfcarry((((reg(A) & 0xF) - (reg(B) & 0xF)) & 0x10) != 0);
}

op(CP_C) {
	zero(reg(A) == reg(C));
	subtract(true);
	carry(reg(A) < reg(C));
	halfcarry((((reg(A) & 0xF) - (reg(C) & 0xF)) & 0x10) != 0);
}

op(CP_D) {
	zero(reg(A) == reg(D));
	subtract(true);
	carry(reg(A) < reg(D));
	halfcarry((((reg(A) & 0xF) - (reg(D) & 0xF)) & 0x10) != 0);
}

op(CP_E) {
	zero(reg(A) == reg(E));
	subtract(true);
	carry(reg(A) < reg(E));
	halfcarry((((reg(A) & 0xF) - (reg(E) & 0xF)) & 0x10) != 0);
}

op(CP_H) {
	zero(reg(A) == reg(H));
	subtract(true);
	carry(reg(A) < reg(H));
	halfcarry((((reg(A) & 0xF) - (reg(H) & 0xF)) & 0x10) != 0);
}

op(CP_L) {
	zero(reg(A) == reg(L));
	subtract(true);
	carry(reg(A) < reg(L));
	halfcarry((((reg(A) & 0xF) - (reg(L) & 0xF)) & 0x10) != 0);
}

op(CP_A) {
	zero(reg(A) == reg(A));
	subtract(true);
	carry(reg(A) < reg(A));
	halfcarry((((reg(A) & 0xF) - (reg(A) & 0xF)) & 0x10) != 0);
}

op(CP_d8) {
	zero(reg(A) == d8);
	subtract(true);
	carry(reg(A) < d8);
	halfcarry((((reg(A) & 0xF) - (d8 & 0xF)) & 0x10) != 0);
}

op(CP_mHL) {
	zero(reg(A) == readByte(reg(HL)));
	subtract(true);
	carry(reg(A) < readByte(reg(HL)));
	halfcarry((((reg(A) & 0xF) - (readByte(reg(HL)) & 0xF)) & 0x10) != 0);
}

// ==============================================
// Bit-based ops
// ==============================================

op(BIT_0_B) {
	zero(((reg(B) >> 0) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_0_C) {
	zero(((reg(C) >> 0) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_0_D) {
	zero(((reg(D) >> 0) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_0_E) {
	zero(((reg(E) >> 0) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_0_H) {
	zero(((reg(H) >> 0) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_0_L) {
	zero(((reg(L) >> 0) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_0_A) {
	zero(((reg(A) >> 0) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_0_mHL) {
	zero(((readByte(reg(HL)) >> 0) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_1_B) {
	zero(((reg(B) >> 1) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_1_C) {
	zero(((reg(C) >> 1) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_1_D) {
	zero(((reg(D) >> 1) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_1_E) {
	zero(((reg(E) >> 1) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_1_H) {
	zero(((reg(H) >> 1) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_1_L) {
	zero(((reg(L) >> 1) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_1_A) {
	zero(((reg(A) >> 1) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_1_mHL) {
	zero(((readByte(reg(HL)) >> 1) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_2_B) {
	zero(((reg(B) >> 2) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_2_C) {
	zero(((reg(C) >> 2) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_2_D) {
	zero(((reg(D) >> 2) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_2_E) {
	zero(((reg(E) >> 2) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_2_H) {
	zero(((reg(H) >> 2) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_2_L) {
	zero(((reg(L) >> 2) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_2_A) {
	zero(((reg(A) >> 2) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_2_mHL) {
	zero(((readByte(reg(HL)) >> 2) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_3_B) {
	zero(((reg(B) >> 3) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_3_C) {
	zero(((reg(C) >> 3) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_3_D) {
	zero(((reg(D) >> 3) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_3_E) {
	zero(((reg(E) >> 3) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_3_H) {
	zero(((reg(H) >> 3) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_3_L) {
	zero(((reg(L) >> 3) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_3_A) {
	zero(((reg(A) >> 3) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_3_mHL) {
	zero(((readByte(reg(HL)) >> 3) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_4_B) {
	zero(((reg(B) >> 4) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_4_C) {
	zero(((reg(C) >> 4) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_4_D) {
	zero(((reg(D) >> 4) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_4_E) {
	zero(((reg(E) >> 4) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_4_H) {
	zero(((reg(H) >> 4) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_4_L) {
	zero(((reg(L) >> 4) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_4_A) {
	zero(((reg(A) >> 4) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_4_mHL) {
	zero(((readByte(reg(HL)) >> 4) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_5_B) {
	zero(((reg(B) >> 5) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_5_C) {
	zero(((reg(C) >> 5) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_5_D) {
	zero(((reg(D) >> 5) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_5_E) {
	zero(((reg(E) >> 5) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_5_H) {
	zero(((reg(H) >> 5) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_5_L) {
	zero(((reg(L) >> 5) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_5_A) {
	zero(((reg(A) >> 5) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_5_mHL) {
	zero(((readByte(reg(HL)) >> 5) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_6_B) {
	zero(((reg(B) >> 6) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_6_C) {
	zero(((reg(C) >> 6) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_6_D) {
	zero(((reg(D) >> 6) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_6_E) {
	zero(((reg(E) >> 6) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_6_H) {
	zero(((reg(H) >> 6) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_6_L) {
	zero(((reg(L) >> 6) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_6_A) {
	zero(((reg(A) >> 6) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_6_mHL) {
	zero(((readByte(reg(HL)) >> 6) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_7_B) {
	zero(((reg(B) >> 7) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_7_C) {
	zero(((reg(C) >> 7) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_7_D) {
	zero(((reg(D) >> 7) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_7_E) {
	zero(((reg(E) >> 7) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_7_H) {
	zero(((reg(H) >> 7) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_7_L) {
	zero(((reg(L) >> 7) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_7_A) {
	zero(((reg(A) >> 7) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(BIT_7_mHL) {
	zero(((readByte(reg(HL)) >> 7) & 1) == 0);
	subtract(false);
	halfcarry(false);
}

op(RES_0_B) {
	reg(B) &= ~(1 << 0);
}

op(RES_0_C) {
	reg(C) &= ~(1 << 0);
}

op(RES_0_D) {
	reg(D) &= ~(1 << 0);
}

op(RES_0_E) {
	reg(E) &= ~(1 << 0);
}

op(RES_0_H) {
	reg(H) &= ~(1 << 0);
}

op(RES_0_L) {
	reg(L) &= ~(1 << 0);
}

op(RES_0_A) {
	reg(A) &= ~(1 << 0);
}

op(RES_0_mHL) {
	writeByte(reg(HL), readByte(reg(HL)) & ~(1 << 0));
}

op(RES_1_B) {
	reg(B) &= ~(1 << 1);
}

op(RES_1_C) {
	reg(C) &= ~(1 << 1);
}

op(RES_1_D) {
	reg(D) &= ~(1 << 1);
}

op(RES_1_E) {
	reg(E) &= ~(1 << 1);
}

op(RES_1_H) {
	reg(H) &= ~(1 << 1);
}

op(RES_1_L) {
	reg(L) &= ~(1 << 1);
}

op(RES_1_A) {
	reg(A) &= ~(1 << 1);
}

op(RES_1_mHL) {
	writeByte(reg(HL), readByte(reg(HL)) & ~(1 << 1));
}

op(RES_2_B) {
	reg(B) &= ~(1 << 2);
}

op(RES_2_C) {
	reg(C) &= ~(1 << 2);
}

op(RES_2_D) {
	reg(D) &= ~(1 << 2);
}

op(RES_2_E) {
	reg(E) &= ~(1 << 2);
}

op(RES_2_H) {
	reg(H) &= ~(1 << 2);
}

op(RES_2_L) {
	reg(L) &= ~(1 << 2);
}

op(RES_2_A) {
	reg(A) &= ~(1 << 2);
}

op(RES_2_mHL) {
	writeByte(reg(HL), readByte(reg(HL)) & ~(1 << 2));
}

op(RES_3_B) {
	reg(B) &= ~(1 << 3);
}

op(RES_3_C) {
	reg(C) &= ~(1 << 3);
}

op(RES_3_D) {
	reg(D) &= ~(1 << 3);
}

op(RES_3_E) {
	reg(E) &= ~(1 << 3);
}

op(RES_3_H) {
	reg(H) &= ~(1 << 3);
}

op(RES_3_L) {
	reg(L) &= ~(1 << 3);
}

op(RES_3_A) {
	reg(A) &= ~(1 << 3);
}

op(RES_3_mHL) {
	writeByte(reg(HL), readByte(reg(HL)) & ~(1 << 3));
}

op(RES_4_B) {
	reg(B) &= ~(1 << 4);
}

op(RES_4_C) {
	reg(C) &= ~(1 << 4);
}

op(RES_4_D) {
	reg(D) &= ~(1 << 4);
}

op(RES_4_E) {
	reg(E) &= ~(1 << 4);
}

op(RES_4_H) {
	reg(H) &= ~(1 << 4);
}

op(RES_4_L) {
	reg(L) &= ~(1 << 4);
}

op(RES_4_A) {
	reg(A) &= ~(1 << 4);
}

op(RES_4_mHL) {
	writeByte(reg(HL), readByte(reg(HL)) & ~(1 << 4));
}

op(RES_5_B) {
	reg(B) &= ~(1 << 5);
}

op(RES_5_C) {
	reg(C) &= ~(1 << 5);
}

op(RES_5_D) {
	reg(D) &= ~(1 << 5);
}

op(RES_5_E) {
	reg(E) &= ~(1 << 5);
}

op(RES_5_H) {
	reg(H) &= ~(1 << 5);
}

op(RES_5_L) {
	reg(L) &= ~(1 << 5);
}

op(RES_5_A) {
	reg(A) &= ~(1 << 5);
}

op(RES_5_mHL) {
	writeByte(reg(HL), readByte(reg(HL)) & ~(1 << 5));
}

op(RES_6_B) {
	reg(B) &= ~(1 << 6);
}

op(RES_6_C) {
	reg(C) &= ~(1 << 6);
}

op(RES_6_D) {
	reg(D) &= ~(1 << 6);
}

op(RES_6_E) {
	reg(E) &= ~(1 << 6);
}

op(RES_6_H) {
	reg(H) &= ~(1 << 6);
}

op(RES_6_L) {
	reg(L) &= ~(1 << 6);
}

op(RES_6_A) {
	reg(A) &= ~(1 << 6);
}

op(RES_6_mHL) {
	writeByte(reg(HL), readByte(reg(HL)) & ~(1 << 6));
}

op(RES_7_B) {
	reg(B) &= ~(1 << 7);
}

op(RES_7_C) {
	reg(C) &= ~(1 << 7);
}

op(RES_7_D) {
	reg(D) &= ~(1 << 7);
}

op(RES_7_E) {
	reg(E) &= ~(1 << 7);
}

op(RES_7_H) {
	reg(H) &= ~(1 << 7);
}

op(RES_7_L) {
	reg(L) &= ~(1 << 7);
}

op(RES_7_A) {
	reg(A) &= ~(1 << 7);
}

op(RES_7_mHL) {
	writeByte(reg(HL), readByte(reg(HL)) & ~(1 << 7));
}

op(SET_0_B) {
	reg(B) |= (1 << 0);
}

op(SET_0_C) {
	reg(C) |= (1 << 0);
}

op(SET_0_D) {
	reg(D) |= (1 << 0);
}

op(SET_0_E) {
	reg(E) |= (1 << 0);
}

op(SET_0_H) {
	reg(H) |= (1 << 0);
}

op(SET_0_L) {
	reg(L) |= (1 << 0);
}

op(SET_0_A) {
	reg(A) |= (1 << 0);
}

op(SET_0_mHL) {
	writeByte(reg(HL), readByte(reg(HL)) | (1 << 0));
}

op(SET_1_B) {
	reg(B) |= (1 << 1);
}

op(SET_1_C) {
	reg(C) |= (1 << 1);
}

op(SET_1_D) {
	reg(D) |= (1 << 1);
}

op(SET_1_E) {
	reg(E) |= (1 << 1);
}

op(SET_1_H) {
	reg(H) |= (1 << 1);
}

op(SET_1_L) {
	reg(L) |= (1 << 1);
}

op(SET_1_A) {
	reg(A) |= (1 << 1);
}

op(SET_1_mHL) {
	writeByte(reg(HL), readByte(reg(HL)) | (1 << 1));
}

op(SET_2_B) {
	reg(B) |= (1 << 2);
}

op(SET_2_C) {
	reg(C) |= (1 << 2);
}

op(SET_2_D) {
	reg(D) |= (1 << 2);
}

op(SET_2_E) {
	reg(E) |= (1 << 2);
}

op(SET_2_H) {
	reg(H) |= (1 << 2);
}

op(SET_2_L) {
	reg(L) |= (1 << 2);
}

op(SET_2_A) {
	reg(A) |= (1 << 2);
}

op(SET_2_mHL) {
	writeByte(reg(HL), readByte(reg(HL)) | (1 << 2));
}

op(SET_3_B) {
	reg(B) |= (1 << 3);
}

op(SET_3_C) {
	reg(C) |= (1 << 3);
}

op(SET_3_D) {
	reg(D) |= (1 << 3);
}

op(SET_3_E) {
	reg(E) |= (1 << 3);
}

op(SET_3_H) {
	reg(H) |= (1 << 3);
}

op(SET_3_L) {
	reg(L) |= (1 << 3);
}

op(SET_3_A) {
	reg(A) |= (1 << 3);
}

op(SET_3_mHL) {
	writeByte(reg(HL), readByte(reg(HL)) | (1 << 3));
}

op(SET_4_B) {
	reg(B) |= (1 << 4);
}

op(SET_4_C) {
	reg(C) |= (1 << 4);
}

op(SET_4_D) {
	reg(D) |= (1 << 4);
}

op(SET_4_E) {
	reg(E) |= (1 << 4);
}

op(SET_4_H) {
	reg(H) |= (1 << 4);
}

op(SET_4_L) {
	reg(L) |= (1 << 4);
}

op(SET_4_A) {
	reg(A) |= (1 << 4);
}

op(SET_4_mHL) {
	writeByte(reg(HL), readByte(reg(HL)) | (1 << 4));
}

op(SET_5_B) {
	reg(B) |= (1 << 5);
}

op(SET_5_C) {
	reg(C) |= (1 << 5);
}

op(SET_5_D) {
	reg(D) |= (1 << 5);
}

op(SET_5_E) {
	reg(E) |= (1 << 5);
}

op(SET_5_H) {
	reg(H) |= (1 << 5);
}

op(SET_5_L) {
	reg(L) |= (1 << 5);
}

op(SET_5_A) {
	reg(A) |= (1 << 5);
}

op(SET_5_mHL) {
	writeByte(reg(HL), readByte(reg(HL)) | (1 << 5));
}

op(SET_6_B) {
	reg(B) |= (1 << 6);
}

op(SET_6_C) {
	reg(C) |= (1 << 6);
}

op(SET_6_D) {
	reg(D) |= (1 << 6);
}

op(SET_6_E) {
	reg(E) |= (1 << 6);
}

op(SET_6_H) {
	reg(H) |= (1 << 6);
}

op(SET_6_L) {
	reg(L) |= (1 << 6);
}

op(SET_6_A) {
	reg(A) |= (1 << 6);
}

op(SET_6_mHL) {
	writeByte(reg(HL), readByte(reg(HL)) | (1 << 6));
}

op(SET_7_B) {
	reg(B) |= (1 << 7);
}

op(SET_7_C) {
	reg(C) |= (1 << 7);
}

op(SET_7_D) {
	reg(D) |= (1 << 7);
}

op(SET_7_E) {
	reg(E) |= (1 << 7);
}

op(SET_7_H) {
	reg(H) |= (1 << 7);
}

op(SET_7_L) {
	reg(L) |= (1 << 7);
}

op(SET_7_A) {
	reg(A) |= (1 << 7);
}

op(SET_7_mHL) {
	writeByte(reg(HL), readByte(reg(HL)) | (1 << 7));
}

// ==============================================
// LD from a word register pointer
// ==============================================

op(LD_A_mBC) {
	reg(A) = readByte(reg(BC));
}

op(LD_A_mC) {
	reg(A) = readByte(0xFF00 + reg(C));
}

op(LD_A_mHLI) {
	reg(A) = readByte(reg(HL)++);
}

op(LD_A_mHLD) {
	reg(A) = readByte(reg(HL)--);
}

op(LD_A_ma16) {
	reg(A) = readByte(d16);
}

op(LD_SP_HL) {
	reg(SP) = reg(HL);
}

op(LD_ma16_SP) {
	writeWord(d16, reg(SP));
}

op(LD_HL_SP_plus_r8) {
	#warning LD HL,(SP+r8) may not set flags correctly
	reg(HL) = reg(SP)+r8;
	if (r8 > 0) {
	halfcarry((((reg(SP) & 0xF) + 1) & 0x10) != 0);
	carry(reg(SP) + r8 > 0xFF);
	} else if (r8 < 0) {
	halfcarry((((reg(SP) & 0xF) - 1) & 0x10) != 0);
	carry(reg(SP) < r8);
	} else {
		 carry(false); halfcarry(false);
	}
}

// ==============================================
// SBC A
// ==============================================

// ==============================================
// CP
// ==============================================

// ==============================================
// SLA
// ==============================================

// ==============================================
// SRA
// ==============================================

// ==============================================
// SRL
// ==============================================

// ==============================================
// RLC
// ==============================================

// ==============================================
// RRC
// ==============================================

// ==============================================
// RR
// ==============================================

// ==============================================
// RST
// ==============================================

op(RST_00H) {
	reg(interrupts) = false;
	gbPush16(cpu, cpu->PC + 1);
	reg(PC) = 0x0000 - 1;
}

op(RST_08H) {
	reg(interrupts) = false;
	gbPush16(cpu, cpu->PC + 1);
	reg(PC) = 0x0008 - 1;
}

op(RST_10H) {
	reg(interrupts) = false;
	gbPush16(cpu, cpu->PC + 1);
	reg(PC) = 0x0010 - 1;
}

op(RST_18H) {
	reg(interrupts) = false;
	gbPush16(cpu, cpu->PC + 1);
	reg(PC) = 0x0018 - 1;
}

op(RST_20H) {
	reg(interrupts) = false;
	gbPush16(cpu, cpu->PC + 1);
	reg(PC) = 0x0020 - 1;
}

op(RST_28H) {
	reg(interrupts) = false;
	gbPush16(cpu, cpu->PC + 1);
	reg(PC) = 0x0028 - 1;
}

op(RST_30H) {
	reg(interrupts) = false;
	gbPush16(cpu, cpu->PC + 1);
	reg(PC) = 0x0030 - 1;
}

op(RST_38H) {
	reg(interrupts) = false;
	gbPush16(cpu, cpu->PC + 1);
	reg(PC) = 0x0038 - 1;
}

op(RST_40H) {
	reg(interrupts) = false;
	gbPush16(cpu, cpu->PC + 1);
	reg(PC) = 0x0040 - 1;
}

op(RST_48H) {
	reg(interrupts) = false;
	gbPush16(cpu, cpu->PC + 1);
	reg(PC) = 0x0048 - 1;
}

op(RST_50H) {
	reg(interrupts) = false;
	gbPush16(cpu, cpu->PC + 1);
	reg(PC) = 0x0050 - 1;
}

op(RST_58H) {
	reg(interrupts) = false;
	gbPush16(cpu, cpu->PC + 1);
	reg(PC) = 0x0058 - 1;
}

op(RST_60H) {
	reg(interrupts) = false;
	gbPush16(cpu, cpu->PC + 1);
	reg(PC) = 0x0060 - 1;
}

// ==============================================
// ADD a word register to HL
// ==============================================

op(ADD_HL_BC) {
	reg(HL) += reg(BC);
}

op(ADD_HL_DE) {
	reg(HL) += reg(DE);
}

op(ADD_HL_HL) {
	reg(HL) += reg(HL);
}

op(ADD_HL_SP) {
	reg(HL) += reg(SP);
}

// ==============================================
// Stop procrastinating and implement these ops!
// ==============================================

op(DAA) { puts("Undefined op \"DAA\"."); exit(1); }
op(RLCA) { puts("Undefined op \"RLCA\"."); exit(1); }
op(RLC_A) { puts("Undefined op \"RLC_A\"."); exit(1); }
op(RLC_B) { puts("Undefined op \"RLC_B\"."); exit(1); }
op(RLC_C) { puts("Undefined op \"RLC_C\"."); exit(1); }
op(RLC_D) { puts("Undefined op \"RLC_D\"."); exit(1); }
op(RLC_E) { puts("Undefined op \"RLC_E\"."); exit(1); }
op(RLC_H) { puts("Undefined op \"RLC_H\"."); exit(1); }
op(RLC_L) { puts("Undefined op \"RLC_L\"."); exit(1); }
op(RLC_mHL) { puts("Undefined op \"RLC_mHL\"."); exit(1); }
op(RRA) { puts("Undefined op \"RRA\"."); exit(1); }
op(RRCA) { puts("Undefined op \"RRCA\"."); exit(1); }
op(RRC_A) { puts("Undefined op \"RRC_A\"."); exit(1); }
op(RRC_B) { puts("Undefined op \"RRC_B\"."); exit(1); }
op(RRC_C) { puts("Undefined op \"RRC_C\"."); exit(1); }
op(RRC_D) { puts("Undefined op \"RRC_D\"."); exit(1); }
op(RRC_E) { puts("Undefined op \"RRC_E\"."); exit(1); }
op(RRC_H) { puts("Undefined op \"RRC_H\"."); exit(1); }
op(RRC_L) { puts("Undefined op \"RRC_L\"."); exit(1); }
op(RRC_mHL) { puts("Undefined op \"RRC_mHL\"."); exit(1); }
op(RR_A) { puts("Undefined op \"RR_A\"."); exit(1); }
op(RR_B) { puts("Undefined op \"RR_B\"."); exit(1); }
op(RR_C) { puts("Undefined op \"RR_C\"."); exit(1); }
op(RR_D) { puts("Undefined op \"RR_D\"."); exit(1); }
op(RR_E) { puts("Undefined op \"RR_E\"."); exit(1); }
op(RR_H) { puts("Undefined op \"RR_H\"."); exit(1); }
op(RR_L) { puts("Undefined op \"RR_L\"."); exit(1); }
op(RR_mHL) { puts("Undefined op \"RR_mHL\"."); exit(1); }
op(SBC_A_A) { puts("Undefined op \"SBC_A_A\"."); exit(1); }
op(SBC_A_B) { puts("Undefined op \"SBC_A_B\"."); exit(1); }
op(SBC_A_C) { puts("Undefined op \"SBC_A_C\"."); exit(1); }
op(SBC_A_D) { puts("Undefined op \"SBC_A_D\"."); exit(1); }
op(SBC_A_E) { puts("Undefined op \"SBC_A_E\"."); exit(1); }
op(SBC_A_H) { puts("Undefined op \"SBC_A_H\"."); exit(1); }
op(SBC_A_L) { puts("Undefined op \"SBC_A_L\"."); exit(1); }
op(SBC_A_d8) { puts("Undefined op \"SBC_A_d8\"."); exit(1); }
op(SBC_A_mHL) { puts("Undefined op \"SBC_A_mHL\"."); exit(1); }
op(SLA_A) { puts("Undefined op \"SLA_A\"."); exit(1); }
op(SLA_B) { puts("Undefined op \"SLA_B\"."); exit(1); }
op(SLA_C) { puts("Undefined op \"SLA_C\"."); exit(1); }
op(SLA_D) { puts("Undefined op \"SLA_D\"."); exit(1); }
op(SLA_E) { puts("Undefined op \"SLA_E\"."); exit(1); }
op(SLA_H) { puts("Undefined op \"SLA_H\"."); exit(1); }
op(SLA_L) { puts("Undefined op \"SLA_L\"."); exit(1); }
op(SLA_mHL) { puts("Undefined op \"SLA_mHL\"."); exit(1); }
op(SRA_A) { puts("Undefined op \"SRA_A\"."); exit(1); }
op(SRA_B) { puts("Undefined op \"SRA_B\"."); exit(1); }
op(SRA_C) { puts("Undefined op \"SRA_C\"."); exit(1); }
op(SRA_D) { puts("Undefined op \"SRA_D\"."); exit(1); }
op(SRA_E) { puts("Undefined op \"SRA_E\"."); exit(1); }
op(SRA_H) { puts("Undefined op \"SRA_H\"."); exit(1); }
op(SRA_L) { puts("Undefined op \"SRA_L\"."); exit(1); }
op(SRA_mHL) { puts("Undefined op \"SRA_mHL\"."); exit(1); }
op(SRL_A) { puts("Undefined op \"SRL_A\"."); exit(1); }
op(SRL_B) { puts("Undefined op \"SRL_B\"."); exit(1); }
op(SRL_C) { puts("Undefined op \"SRL_C\"."); exit(1); }
op(SRL_D) { puts("Undefined op \"SRL_D\"."); exit(1); }
op(SRL_E) { puts("Undefined op \"SRL_E\"."); exit(1); }
op(SRL_H) { puts("Undefined op \"SRL_H\"."); exit(1); }
op(SRL_L) { puts("Undefined op \"SRL_L\"."); exit(1); }
op(SRL_mHL) { puts("Undefined op \"SRL_mHL\"."); exit(1); }